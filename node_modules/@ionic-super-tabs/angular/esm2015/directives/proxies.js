import * as tslib_1 from "tslib";
/* tslint:disable */
/* auto-generated angular directive proxies */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, NgZone } from '@angular/core';
import { ProxyCmp, proxyOutputs } from './proxies-utils';
let SuperTab = class SuperTab {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
SuperTab.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
SuperTab = tslib_1.__decorate([
    ProxyCmp({ inputs: ['noScroll'], 'methods': ['getRootScrollableEl'] }),
    Component({ selector: 'super-tab', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['noScroll'] })
], SuperTab);
export { SuperTab };
let SuperTabButton = class SuperTabButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
SuperTabButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
SuperTabButton = tslib_1.__decorate([
    ProxyCmp({ inputs: ['disabled'] }),
    Component({ selector: 'super-tab-button', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['disabled'] })
], SuperTabButton);
export { SuperTabButton };
let SuperTabs = class SuperTabs {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['tabChange']);
    }
};
SuperTabs.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
SuperTabs = tslib_1.__decorate([
    ProxyCmp({ inputs: ['activeTabIndex', 'config'], 'methods': ['setConfig', 'selectTab'] }),
    Component({ selector: 'super-tabs', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['activeTabIndex', 'config'] })
], SuperTabs);
export { SuperTabs };
let SuperTabsContainer = class SuperTabsContainer {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['activeTabIndexChange', 'selectedTabIndexChange']);
    }
};
SuperTabsContainer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
SuperTabsContainer = tslib_1.__decorate([
    ProxyCmp({ inputs: ['autoScrollTop', 'swipeEnabled'], 'methods': ['scrollToTop'] }),
    Component({ selector: 'super-tabs-container', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['autoScrollTop', 'swipeEnabled'] })
], SuperTabsContainer);
export { SuperTabsContainer };
let SuperTabsToolbar = class SuperTabsToolbar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['buttonClick']);
    }
};
SuperTabsToolbar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
SuperTabsToolbar = tslib_1.__decorate([
    ProxyCmp({ inputs: ['color', 'scrollable', 'scrollablePadding', 'showIndicator'] }),
    Component({ selector: 'super-tabs-toolbar', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['color', 'scrollable', 'scrollablePadding', 'showIndicator'] })
], SuperTabsToolbar);
export { SuperTabsToolbar };
//# sourceMappingURL=data:application/json;base64,