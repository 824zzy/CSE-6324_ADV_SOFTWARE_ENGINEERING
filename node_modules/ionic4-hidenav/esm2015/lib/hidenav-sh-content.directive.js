/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Host, Self, Optional, ElementRef } from '@angular/core';
import { IonContent } from '@ionic/angular';
import { HidenavShService } from './hidenav-sh-service.service';
import $ from 'jquery';
export class HidenavShContentDirective {
    /**
     * @param {?} el
     * @param {?} contentElem
     * @param {?} globals
     */
    constructor(el, contentElem, globals) {
        this.el = el;
        this.contentElem = contentElem;
        this.globals = globals;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.contentElem.nativeElement.hasAttribute('hidenav-tabspage')) {
            this.name = this.globals.requestName();
            $(this.contentElem.nativeElement).attr('hidenav-sh-content', this.name);
            $('hidenav-stretchheader', $(this.contentElem.nativeElement).parents().get().find((/**
             * @param {?} itm
             * @return {?}
             */
            itm => $(itm).find('[hidenav-header]').length))).attr('hidenav-sh-header', this.name);
            this.start();
        }
        else {
            /** @type {?} */
            let counter = 0;
            /** @type {?} */
            let int = setInterval((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                let x = $(this.contentElem.nativeElement).closest('[hidenav-sh-tabscontent]').attr('hidenav-sh-tabscontent');
                counter++;
                if (x && x.length > 0) {
                    this.parent = $(this.contentElem.nativeElement).closest('[hidenav-sh-tabscontent]').attr('hidenav-sh-tabscontent');
                    this.name = this.globals.requestTabName(this.parent);
                    $(this.contentElem.nativeElement).attr('hidenav-sh-content', this.name);
                    $(this.contentElem.nativeElement).attr('hidenav-tabspage', this.parent);
                    this.start();
                    clearInterval(int);
                }
                else if (counter > 50) {
                    clearInterval(int);
                }
            }), 50);
        }
    }
    /**
     * @return {?}
     */
    start() {
        if (this.name) {
            if (typeof this.globals.data[this.name] == 'undefined' || this.globals.data[this.name] == null)
                this.globals.data[this.name] = [];
            this.globals.data[this.name].content = this.el;
            this.globals.data[this.name].contentEl = this.contentElem;
            if (this.parent)
                this.globals.data[this.name].parent = this.parent;
            this.globals.initiate(this.name);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.name) {
            delete this.globals.data[this.name].content;
        }
    }
}
HidenavShContentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hidenav-sh-content]'
            },] }
];
HidenavShContentDirective.ctorParameters = () => [
    { type: IonContent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
    { type: ElementRef },
    { type: HidenavShService }
];
HidenavShContentDirective.propDecorators = {
    hntb: [{ type: Input, args: ['hidenav-tabspage',] }]
};
if (false) {
    /** @type {?} */
    HidenavShContentDirective.prototype.parent;
    /** @type {?} */
    HidenavShContentDirective.prototype.name;
    /** @type {?} */
    HidenavShContentDirective.prototype.hntb;
    /** @type {?} */
    HidenavShContentDirective.prototype.el;
    /** @type {?} */
    HidenavShContentDirective.prototype.contentElem;
    /**
     * @type {?}
     * @private
     */
    HidenavShContentDirective.prototype.globals;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZW5hdi1zaC1jb250ZW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lvbmljNC1oaWRlbmF2LyIsInNvdXJjZXMiOlsibGliL2hpZGVuYXYtc2gtY29udGVudC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBS3ZCLE1BQU07Ozs7OztJQU9GLFlBQWdELEVBQWMsRUFBUyxXQUF1QixFQUFVLE9BQXlCO1FBQWpGLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBUyxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWtCO0lBRWpJLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ1gsSUFBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFDO1lBQ2hFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN2QyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hFLENBQUMsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJOzs7O1lBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxD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Q2pDOzs7WUFOTyxVQUFVLHVCQWNBLElBQUksWUFBSSxJQUFJLFlBQUksUUFBUTtZQWZNLFVBQVU7WUFFbEQsZ0JBQWdCOzs7bUJBV25CLEtBQUssU0FBQyxrQkFBa0I7Ozs7SUFIekIsMkNBQVk7O0lBQ1oseUNBQVU7O0lBRVYseUNBQXFDOztJQUV4Qix1Q0FBaUQ7O0lBQUUsZ0RBQThCOzs7OztJQUFFLDRDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBJbnB1dCwgSG9zdCwgU2VsZiwgT3B0aW9uYWwsIEVsZW1lbnRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtJb25Db250ZW50fSBmcm9tICdAaW9uaWMvYW5ndWxhcic7XG5pbXBvcnQge0hpZGVuYXZTaFNlcnZpY2V9IGZyb20gJy4vaGlkZW5hdi1zaC1zZXJ2aWNlLnNlcnZpY2UnO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2hpZGVuYXYtc2gtY29udGVudF0nXG59KVxuZXhwb3J0IGNsYXNzIEhpZGVuYXZTaENvbnRlbnREaXJlY3RpdmUge1xuXG4gICAgcGFyZW50OiBhbnk7XG4gICAgbmFtZTogYW55O1xuXG4gICAgQElucHV0KCdoaWRlbmF2LXRhYnNwYWdlJykgaG50YjogYW55O1xuXG4gICAgY29uc3RydWN0b3IoIEBIb3N0KCkgQFNlbGYoKSBAT3B0aW9uYWwoKSBwdWJsaWMgZWw6IElvbkNvbnRlbnQsIHB1YmxpYyBjb250ZW50RWxlbTogRWxlbWVudFJlZiwgcHJpdmF0ZSBnbG9iYWxzOiBIaWRlbmF2U2hTZXJ2aWNlKSB7XG5cbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIGlmKCF0aGlzLmNvbnRlbnRFbGVtLm5hdGl2ZUVsZW1lbnQuaGFzQXR0cmlidXRlKCdoaWRlbmF2LXRhYnNwYWdlJykpe1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nbG9iYWxzLnJlcXVlc3ROYW1lKCk7XG4gICAgICAgICAgICAkKHRoaXMuY29udGVudEVsZW0ubmF0aXZlRWxlbWVudCkuYXR0cignaGlkZW5hdi1zaC1jb250ZW50JywgdGhpcy5uYW1lKTtcbiAgICAgICAgICAgICQoJ2hpZGVuYXYtc3RyZXRjaGhlYWRlcicsICQodGhpcy5jb250ZW50RWxlbS5uYXRpdmVFbGVtZW50KS5wYXJlbnRzKCkuZ2V0KCkuZmluZChpdG0gPT4gJChpdG0pLmZpbmQoJ1toaWRlbmF2LWhlYWRlcl0nKS5sZW5ndGgpKS5hdHRyKCdoaWRlbmF2LXNoLWhlYWRlcicsIHRoaXMubmFtZSk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgbGV0IGludCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgeCA9ICQodGhpcy5jb250ZW50RWxlbS5uYXRpdmVFbGVtZW50KS5jbG9zZXN0KCdbaGlkZW5hdi1zaC10YWJzY29udGVudF0nKS5hdHRyKCdoaWRlbmF2LXNoLXRhYnNjb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgY291bnRlcisrO1xuICAgICAgICAgICAgICAgIGlmKHggJiYgeC5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSAkKHRoaXMuY29udGVudEVsZW0ubmF0aXZlRWxlbWVudCkuY2xvc2VzdCgnW2hpZGVuYXYtc2gtdGFic2NvbnRlbnRdJykuYXR0cignaGlkZW5hdi1zaC10YWJzY29udGVudCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdsb2JhbHMucmVxdWVzdFRhYk5hbWUodGhpcy5wYXJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMuY29udGVudEVsZW0ubmF0aXZlRWxlbWVudCkuYXR0cignaGlkZW5hdi1zaC1jb250ZW50JywgdGhpcy5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzLmNvbnRlbnRFbGVtLm5hdGl2ZUVsZW1lbnQpLmF0dHIoJ2hpZGVuYXYtdGFic3BhZ2UnLCB0aGlzLnBhcmVudCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnQpO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmKGNvdW50ZXIgPiA1MCl7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCA1MClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZih0aGlzLm5hbWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXSA9PSAndW5kZWZpbmVkJyB8fCB0aGlzLmdsb2JhbHMuZGF0YVt0aGlzLm5hbWVdID09IG51bGwpXG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXS5jb250ZW50ID0gdGhpcy5lbDtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0uY29udGVudEVsID0gdGhpcy5jb250ZW50RWxlbTtcbiAgICAgICAgICAgIGlmKHRoaXMucGFyZW50KVxuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0ucGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbHMuaW5pdGlhdGUodGhpcy5uYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAgICAgXG4gICAgXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGlmKHRoaXMubmFtZSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0uY29udGVudDtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19