/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Host, Self, Optional, ElementRef, ContentChild, forwardRef } from '@angular/core';
import { IonContent } from '@ionic/angular';
import { HidenavService } from './hidenav-service.service';
import { SuperTabs } from '@ionic-super-tabs/angular';
import $ from 'jquery';
export class HidenavTabscontentDirective {
    /**
     * @param {?} el
     * @param {?} contentElem
     * @param {?} globals
     */
    constructor(el, contentElem, globals) {
        this.el = el;
        this.contentElem = contentElem;
        this.globals = globals;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.name = this.globals.requestName();
        this.contentElem.nativeElement.setAttribute('hidenav-tabscontent', this.name);
        $('[hidenav-header]', $(this.contentElem.nativeElement).parents().get().find((/**
         * @param {?} itm
         * @return {?}
         */
        itm => $(itm).find('[hidenav-header]').length))).attr('hidenav-header', this.name);
        if (this.name) {
            if (typeof this.globals.data[this.name] == 'undefined' || this.globals.data[this.name] == null)
                this.globals.data[this.name] = [];
            this.globals.data[this.name].tabscontent = this.el;
            this.globals.data[this.name].tabscontentElem = this.contentElem;
            this.globals.initiate(this.name);
            if (this.supertabs) {
                this.supertabs.tabChange.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => {
                    if (e.detail.changed == true) {
                        /** @type {?} */
                        let i = e.detail.index;
                        /** @type {?} */
                        let tabs = this.contentElem.nativeElement.querySelectorAll('super-tab');
                        /** @type {?} */
                        let results = [];
                        for (let tab of tabs) {
                            /** @type {?} */
                            let cont = tab.querySelector('ion-content');
                            if (cont.attributes['hidenav-content'])
                                results.push(cont.attributes['hidenav-content'].nodeValue);
                            else
                                results.push(null);
                        }
                        if (results[i] != null) {
                            this.globals.resetTabs(this.name, results[i]);
                        }
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.name) {
            delete this.globals.data[this.name].tabscontent;
        }
    }
}
HidenavTabscontentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hidenav-tabscontent]'
            },] }
];
HidenavTabscontentDirective.ctorParameters = () => [
    { type: IonContent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
    { type: ElementRef },
    { type: HidenavService }
];
HidenavTabscontentDirective.propDecorators = {
    supertabs: [{ type: ContentChild, args: [forwardRef((/**
                 * @return {?}
                 */
                () => SuperTabs)),] }]
};
if (false) {
    /** @type {?} */
    HidenavTabscontentDirective.prototype.supertabs;
    /** @type {?} */
    HidenavTabscontentDirective.prototype.name;
    /** @type {?} */
    HidenavTabscontentDirective.prototype.el;
    /** @type {?} */
    HidenavTabscontentDirective.prototype.contentElem;
    /**
     * @type {?}
     * @private
     */
    HidenavTabscontentDirective.prototype.globals;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZW5hdi10YWJzY29udGVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pb25pYzQtaGlkZW5hdi8iLCJzb3VyY2VzIjpbImxpYi9oaWRlbmF2LXRhYnNjb250ZW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwRyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRCxPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFLdkIsTUFBTTs7Ozs7O0lBTUYsWUFBK0MsRUFBYyxFQUFTLFdBQXVCLEVBQVUsT0FBdUI7UUFBL0UsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFTLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7SUFFOUgsQ0FBQzs7OztJQUVELGVBQWU7UUFDWCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5RSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSTs7OztRQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvSixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWCxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSTtnQkFDMUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDbkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVqQyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVM7Ozs7Z0JBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ25DLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFOzs0QkFDdEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSzs7NEJBQ2xCLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7OzRCQUNuRSxPQUFPLEdBQUcsRUFBRTt3QkFDaEIsS0FBSyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7O2dDQUNkLElBQUksR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQzs0QkFDM0MsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDO2dDQUNsQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7Z0NBRTNELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7eUJBQzFCO3dCQUNELElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTs0QkFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt5QkFFakQ7cUJBQ0o7Z0JBQ0wsQ0FBQyxFQUFDLENBQUM7YUFDTjtTQUNKO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUM7U0FDbkQ7SUFDTCxDQUFDOzs7WUFuREosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSx1QkFBdUI7YUFDcEM7OztZQVBPLFVBQVUsdUJBY0QsSUFBSSxZQUFJLElBQUksWUFBSSxRQUFRO1lBZkEsVUFBVTtZQUUzQyxjQUFjOzs7d0JBU2pCLFlBQVksU0FBQyxVQUFVOzs7Z0JBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFDOzs7O0lBQXpDLGdEQUFnRTs7SUFFaEUsMkNBQVU7O0lBRUUseUNBQWlEOztJQUFFLGtEQUE4Qjs7Ozs7SUFBRSw4Q0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSG9zdCwgU2VsZiwgT3B0aW9uYWwsIEVsZW1lbnRSZWYsIENvbnRlbnRDaGlsZCwgZm9yd2FyZFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7SW9uQ29udGVudH0gZnJvbSAnQGlvbmljL2FuZ3VsYXInO1xyXG5pbXBvcnQge0hpZGVuYXZTZXJ2aWNlfSBmcm9tICcuL2hpZGVuYXYtc2VydmljZS5zZXJ2aWNlJztcclxuaW1wb3J0IHtTdXBlclRhYnN9IGZyb20gJ0Bpb25pYy1zdXBlci10YWJzL2FuZ3VsYXInO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1toaWRlbmF2LXRhYnNjb250ZW50XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhpZGVuYXZUYWJzY29udGVudERpcmVjdGl2ZSB7XHJcblxyXG4gICAgQENvbnRlbnRDaGlsZChmb3J3YXJkUmVmKCgpID0+IFN1cGVyVGFicykpIHN1cGVydGFiczogU3VwZXJUYWJzO1xyXG5cclxuICAgIG5hbWU6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihASG9zdCgpIEBTZWxmKCkgQE9wdGlvbmFsKCkgcHVibGljIGVsOiBJb25Db250ZW50LCBwdWJsaWMgY29udGVudEVsZW06IEVsZW1lbnRSZWYsIHByaXZhdGUgZ2xvYmFsczogSGlkZW5hdlNlcnZpY2UpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2xvYmFscy5yZXF1ZXN0TmFtZSgpO1xyXG4gICAgICAgIHRoaXMuY29udGVudEVsZW0ubmF0aXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hpZGVuYXYtdGFic2NvbnRlbnQnLCB0aGlzLm5hbWUpO1xyXG4gICAgICAgICQoJ1toaWRlbmF2LWhlYWRlcl0nLCAkKHRoaXMuY29udGVudEVsZW0ubmF0aXZlRWxlbWVudCkucGFyZW50cygpLmdldCgpLmZpbmQoaXRtID0+ICQoaXRtKS5maW5kKCdbaGlkZW5hdi1oZWFkZXJdJykubGVuZ3RoKSkuYXR0cignaGlkZW5hdi1oZWFkZXInLCB0aGlzLm5hbWUpO1xyXG4gICAgICAgIGlmICh0aGlzLm5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmdsb2JhbHMuZGF0YVt0aGlzLm5hbWVdID09ICd1bmRlZmluZWQnIHx8IHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0gPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0gPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXS50YWJzY29udGVudCA9IHRoaXMuZWw7XHJcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0udGFic2NvbnRlbnRFbGVtID0gdGhpcy5jb250ZW50RWxlbTtcclxuICAgICAgICAgICAgdGhpcy5nbG9iYWxzLmluaXRpYXRlKHRoaXMubmFtZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zdXBlcnRhYnMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VwZXJ0YWJzLnRhYkNoYW5nZS5zdWJzY3JpYmUoZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZGV0YWlsLmNoYW5nZWQgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IGUuZGV0YWlsLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGFicyA9IHRoaXMuY29udGVudEVsZW0ubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdXBlci10YWInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdGFiIG9mIHRhYnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250ID0gdGFiLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1jb250ZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udC5hdHRyaWJ1dGVzWydoaWRlbmF2LWNvbnRlbnQnXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goY29udC5hdHRyaWJ1dGVzWydoaWRlbmF2LWNvbnRlbnQnXS5ub2RlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0c1tpXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdsb2JhbHMucmVzZXRUYWJzKHRoaXMubmFtZSwgcmVzdWx0c1tpXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubmFtZSkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXS50YWJzY29udGVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==