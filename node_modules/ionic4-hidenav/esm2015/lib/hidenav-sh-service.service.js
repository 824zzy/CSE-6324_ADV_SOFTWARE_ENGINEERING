/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class HidenavShService {
    constructor() {
        this.data = [];
        this.mode = 'ios';
        this.names = [];
        this.tabnames = [];
        this.scroll = new Subject();
    }
    /**
     * @return {?}
     */
    requestName() {
        /** @type {?} */
        let name = 'page' + this.names.length;
        this.names.push(name);
        return name;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    requestTabName(name) {
        if (!this.tabnames[name])
            this.tabnames[name] = [];
        /** @type {?} */
        let tabname = name + 'tab' + this.tabnames[name].length;
        this.tabnames[name].push(tabname);
        return tabname;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    initiate(name) {
        /** @type {?} */
        let names = [];
        for (let key in this.data) {
            if (this.data[key].parent == name)
                names.push(key);
        }
        for (let name of names) {
            this.initiate2(name);
        }
        if (names.length == 0)
            this.initiate2(name);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    initiate2(name) {
        if (!(this.data[name] && (this.data[name].parent && this.data[this.data[name].parent] && this.data[this.data[name].parent].tabscontent && this.data[name].content && this.data[this.data[name].parent].header) || (!this.data[name].parent && this.data[name].content && this.data[name].header)))
            return false;
        /** @type {?} */
        let parent = this.data[name].parent;
        /** @type {?} */
        let content = this.data[name].content;
        if (this.data[name].lastscroll == null)
            this.data[name].lastscroll = 0;
        if (this.data[name].guardEvents == null)
            this.data[name].guardEvents = true;
        content.scrollEvents = true;
        if (!parent) {
            /** @type {?} */
            let header = this.data[name].header;
            if (this.data[name].static) {
                this.data[name].static.forEach((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => {
                    el.nativeElement.style.position = 'absolute';
                    el.nativeElement.style.zIndex = 102;
                }));
            }
            if (header) {
                /** @type {?} */
                let parentElem = header.nativeElement.parentNode;
                /** @type {?} */
                let elem = header.nativeElement;
                if (parentElem.getAttribute('init-expanded') == 'true')
                    this.data[name].initExpanded = true;
                /** @type {?} */
                let notchHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--ion-safe-area-top"), 10);
                this.data[name].shrinkexpandheaderHeight = parseInt(parentElem.getAttribute('header-height'), 10) + notchHeight;
                this.data[name].opacityFactor = parseInt(parentElem.getAttribute('opacity-factor'), 10);
                this.data[name].opacityColor = parentElem.getAttribute('opacity-color');
                this.data[name].blurFactor = parseInt(parentElem.getAttribute('blur-factor'), 10);
                parentElem.style.height = this.data[name].shrinkexpandheaderHeight + 'px';
                parentElem.style.overflow = 'hidden';
                parentElem.style.position = 'absolute';
                elem.style.position = 'absolute';
                parentElem.style.width = '100%';
                elem.style.width = '100%';
                this.waitforelem(name, 'this.data[name].header.nativeElement.scrollHeight', 'proceedShrinkExpand');
            }
        }
        else if (parent) {
            /** @type {?} */
            let header = this.data[parent].header;
            /** @type {?} */
            let tabscontentElem = this.data[parent].tabscontentElem;
            if (this.data[parent].static) {
                this.data[parent].static.forEach((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => {
                    el.nativeElement.style.position = 'absolute';
                    el.nativeElement.style.zIndex = 102;
                }));
            }
            if (header) {
                /** @type {?} */
                let supertabsToolbar = tabscontentElem.nativeElement.querySelector('super-tabs-toolbar');
                /** @type {?} */
                let parentElem = header.nativeElement.parentNode;
                /** @type {?} */
                let elem = header.nativeElement;
                if (parentElem.getAttribute('init-expanded') == 'true')
                    this.data[name].initExpanded = true;
                if (parentElem.getAttribute('preserve-header') == 'true') {
                    this.data[name].preserveHeader = true;
                    this.data[parent].preserveHeader = true;
                }
                /** @type {?} */
                let notchHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--ion-safe-area-top"), 10);
                this.data[name].shrinkexpandheaderHeight = parseInt(parentElem.getAttribute('header-height'), 10) + notchHeight;
                this.data[name].opacityFactor = parseInt(parentElem.getAttribute('opacity-factor'), 10);
                this.data[name].opacityColor = elem.getAttribute('opacity-color');
                this.data[name].blurFactor = parseInt(parentElem.getAttribute('blur-factor'), 10);
                parentElem.style.height = this.data[name].shrinkexpandheaderHeight + 'px';
                parentElem.style.overflow = 'hidden';
                parentElem.style.position = 'absolute';
                elem.style.position = 'absolute';
                parentElem.style.width = '100%';
                elem.style.width = '100%';
                supertabsToolbar.style.position = 'absolute';
                supertabsToolbar.style.transform = 'translate3d(0, ' + this.data[name].shrinkexpandheaderHeight + 'px, 0)';
                parentElem.style.zIndex = 101;
                this.waitforelemTabs(name, 'this.data[this.data[name].parent].header.nativeElement.scrollHeight', 'this.data[this.data[name].parent].tabscontentElem.nativeElement.querySelector(\'super-tabs-toolbar\').clientHeight', 'proceedShrinkExpandTabs');
            }
        }
    }
    /**
     * @param {?} name
     * @param {?} evaluate
     * @param {?} func
     * @return {?}
     */
    waitforelem(name, evaluate, func) {
        /** @type {?} */
        let x = eval(evaluate);
        if (!{ x } || x < this.data[name].shrinkexpandheaderHeight) {
            window.requestAnimationFrame(this.waitforelem.bind(this, name, evaluate, func));
        }
        else {
            this[func](name);
        }
    }
    /**
     * @param {?} name
     * @param {?} evaluate
     * @param {?} evaluate2
     * @param {?} func
     * @return {?}
     */
    waitforelemTabs(name, evaluate, evaluate2, func) {
        /** @type {?} */
        let x = eval(evaluate);
        /** @type {?} */
        let y = eval(evaluate2);
        if (!{ x } || x < this.data[name].shrinkexpandheaderHeight || !{ y } || y == 0) {
            window.requestAnimationFrame(this.waitforelemTabs.bind(this, name, evaluate, evaluate2, func));
        }
        else {
            this[func](name);
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    proceedShrinkExpand(name) {
        /** @type {?} */
        let parentElem = this.data[name].header.nativeElement.parentNode;
        /** @type {?} */
        let elem = this.data[name].header.nativeElement;
        /** @type {?} */
        let overlay = this.data[name].header.nativeElement.parentNode.querySelector('.overlay');
        if (this.data[name].opacityColor) {
            overlay.style.setProperty('--color', this.data[name].opacityColor);
        }
        if (this.data[name].opacityFactor > 0) {
            //angular decides that opacity is bad and changes it to alpha which doesn't work lol
            overlay.style.setProperty('filter', 'opacity(var(--opacity))');
            overlay.style.setProperty('--opacity', this.data[name].opacityFactor / 10);
        }
        if (this.data[name].blurFactor > 0) {
            elem.style.setProperty('filter', 'blur(var(--blur))');
            elem.style.setProperty('--blur', this.data[name].blurFactor / 10);
        }
        this.data[name].shrinkexpandHeight = this.data[name].shrinkexpandheaderHeight;
        this.data[name].shrinkexpandHeight = this.data[name].header.nativeElement.scrollHeight;
        elem.style.transform = 'translate3d(0, ' + -((this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight) / 2) + 'px, 0)';
        this.data[name].content.getScrollElement().then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.data[name].contentElem = res;
            this.data[name].paddingTop = parseInt(window.getComputedStyle(this.data[name].contentElem)['padding-top'], 10);
            this.data[name].contentElem.style.paddingTop = (this.data[name].shrinkexpandHeight + this.data[name].paddingTop) + 'px';
            //this.data[name].contentElem.style.marginTop = this.data[name].shrinkexpandheaderHeight + 'px';
            /** @type {?} */
            let elemPad = document.createElement('div');
            elemPad.style.cssText = 'background:rgba(0,0,0,0)';
            /** @type {?} */
            let x = this.data[name].contentElem.scrollHeight + (this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight);
            //experimental height
            elemPad.style.height = x + 'px';
            setTimeout((/**
             * @return {?}
             */
            () => {
                //check if height is still ok and adjust if not
                this.data[name].elemPadHeight = Math.max(0, (x - (this.data[name].contentElem.scrollHeight - this.data[name].contentElem.offsetHeight) + (this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight)));
                elemPad.style.height = this.data[name].elemPadHeight + 'px';
            }), 100);
            this.data[name].contentElem.appendChild(elemPad);
            /** @type {?} */
            let scrollDist = this.data[name].initExpanded ? 2 : (this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight);
            this.data[name].content.scrollByPoint(0, scrollDist, 0).then((/**
             * @return {?}
             */
            () => {
                this.data[name].contentHeight = this.data[name].contentEl.nativeElement.clientHeight;
                this.data[name].content.scrollEvents = true;
                this.data[name].content.ionScroll.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => {
                    if (e.detail.scrollTop == 0) {
                        this.data[name].contentElem.style.paddingTop = 0;
                        this.data[name].contentEl.nativeElement.style.height = (this.data[name].contentHeight - this.data[name].shrinkexpandHeight) + 'px';
                        this.data[name].contentEl.nativeElement.style.top = (this.data[name].shrinkexpandHeight + this.data[name].paddingTop) + 'px';
                        elemPad.style.height = (this.data[name].elemPadHeight + this.data[name].shrinkexpandHeight + this.data[name].paddingTop) + 'px';
                    }
                    else {
                        /** @type {?} */
                        let s = e.detail.scrollTop;
                        this.data[name].contentElem.style.paddingTop = (this.data[name].shrinkexpandHeight + this.data[name].paddingTop) + 'px';
                        this.data[name].contentEl.nativeElement.style.height = (this.data[name].contentHeight + this.data[name].shrinkexpandHeight) + 'px';
                        this.data[name].contentEl.nativeElement.style.top = null;
                        this.data[name].contentElem.scrollTop = s;
                        elemPad.style.height = this.data[name].elemPadHeight + 'px';
                    }
                    if (this.data[name].initExpanded) {
                        this.data[name].content.scrollToPoint(0, 0, 0).then((/**
                         * @return {?}
                         */
                        () => {
                            this.data[name].initExpanded = false;
                        }));
                    }
                    if (this.data[name].initExpanded) {
                        this.data[name].content.scrollToPoint(0, 0, 0).then((/**
                         * @return {?}
                         */
                        () => {
                            this.data[name].initExpanded = false;
                        }));
                    }
                    /** @type {?} */
                    let height = Math.max(Math.min(this.data[name].shrinkexpandHeight, this.data[name].shrinkexpandHeight - e.detail.scrollTop), this.data[name].shrinkexpandheaderHeight);
                    elem.style.transform = 'translate3d(0, ' + -(Math.min((this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight) / 2, e.detail.scrollTop / 2)) + 'px, 0)';
                    parentElem.style.height = height + 'px';
                    /** @type {?} */
                    let scrollFactor = Math.min(e.detail.scrollTop / (this.data[name].shrinkexpandHeight / 2), 1);
                    if (scrollFactor >= 0) {
                        /** @type {?} */
                        let currentValOpacity = overlay.style.getPropertyValue('--opacity');
                        /** @type {?} */
                        let newValOpacity = this.data[name].opacityFactor / 10 * scrollFactor;
                        if (currentValOpacity != newValOpacity)
                            overlay.style.setProperty('--opacity', newValOpacity);
                        /** @type {?} */
                        let currentValBlur = elem.style.getPropertyValue('--blur');
                        /** @type {?} */
                        let newValBlur = (this.data[name].blurFactor * scrollFactor) + 'px';
                        if (currentValBlur != newValBlur)
                            elem.style.setProperty('--blur', newValBlur);
                    }
                    //event emitter
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data[name].guardEvents = false;
                    }), 10);
                    if (this.data[name].lastscroll != height && !this.data[name].guardEvents) {
                        this.scroll.next({ name: this.data[name].parent ? this.data[name].parent : name, height: height });
                    }
                    this.data[name].lastscroll = height;
                    //
                }));
                //catch the last tick
                this.data[name].content.ionScrollEnd.subscribe((/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        if (this.data[name].contentElem.scrollTop == 0) {
                            this.data[name].contentElem.style.paddingTop = 0;
                            this.data[name].contentEl.nativeElement.style.height = (this.data[name].contentHeight - this.data[name].shrinkexpandHeight) + 'px';
                            this.data[name].contentEl.nativeElement.style.top = (this.data[name].shrinkexpandHeight + this.data[name].paddingTop) + 'px';
                            elemPad.style.height = (this.data[name].elemPadHeight + this.data[name].shrinkexpandHeight + this.data[name].paddingTop) + 'px';
                        }
                    }), 10);
                }));
            }));
        }));
    }
    /**
     * @param {?} name
     * @return {?}
     */
    proceedShrinkExpandTabs(name) {
        /** @type {?} */
        let parent = this.data[name].parent;
        /** @type {?} */
        let parentElem = this.data[parent].header.nativeElement.parentNode;
        /** @type {?} */
        let elem = this.data[parent].header.nativeElement;
        /** @type {?} */
        let tabscontentElem = this.data[parent].tabscontentElem;
        /** @type {?} */
        let supertabsToolbar = tabscontentElem.nativeElement.querySelector('super-tabs-toolbar');
        /** @type {?} */
        let overlay = this.data[parent].header.nativeElement.parentNode.querySelector('.overlay');
        if (this.data[name].opacityColor) {
            overlay.style.setProperty('--color', this.data[name].opacityColor);
        }
        if (this.data[name].opacityFactor > 0) {
            //angular decides that opacity is bad and changes it to alpha which doesn't work lol
            overlay.style.setProperty('filter', 'opacity(var(--opacity))');
            overlay.style.setProperty('--opacity', this.data[name].opacityFactor / 10);
        }
        if (this.data[name].blurFactor > 0) {
            elem.style.setProperty('filter', 'blur(var(--blur))');
            elem.style.setProperty('--blur', this.data[name].blurFactor / 10);
        }
        this.data[name].shrinkexpandHeight = this.data[name].shrinkexpandheaderHeight;
        this.data[name].shrinkexpandHeight = elem.scrollHeight;
        elem.style.transform = 'translate3d(0, ' + -((this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight) / 2) + 'px, 0)';
        this.data[name].content.getScrollElement().then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.data[name].contentElem = res;
            this.data[name].paddingTop = parseInt(window.getComputedStyle(this.data[name].contentElem)['padding-top'], 10);
            this.data[name].contentElem.style.paddingTop = (this.data[name].shrinkexpandHeight + supertabsToolbar.clientHeight + this.data[name].paddingTop) + 'px';
            this.data[name].contentElem.style.height = (this.data[parent].tabscontentElem.nativeElement.clientHeight) + 'px';
            //this.data[name].contentElem.style.marginTop = this.data[name].shrinkexpandheaderHeight + 'px';
            /** @type {?} */
            let elemPad = document.createElement('div');
            elemPad.style.cssText = 'background:rgba(0,0,0,0)';
            /** @type {?} */
            let x = this.data[name].contentElem.scrollHeight + (this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight);
            //experimental height
            elemPad.style.height = x + 'px';
            setTimeout((/**
             * @return {?}
             */
            () => {
                //check if height is still ok and adjust if not
                this.data[name].elemPadHeight = Math.max(0, (x - (this.data[name].contentElem.scrollHeight - this.data[name].contentElem.offsetHeight) + (this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight)));
                elemPad.style.height = this.data[name].elemPadHeight + 'px';
            }), 100);
            this.data[name].contentElem.appendChild(elemPad);
            /** @type {?} */
            let scrollDist = this.data[name].initExpanded ? 2 : (this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight);
            this.data[name].content.scrollByPoint(0, scrollDist, 0).then((/**
             * @return {?}
             */
            () => {
                this.data[name].contentHeight = this.data[name].contentEl.nativeElement.clientHeight;
                this.data[name].content.scrollEvents = true;
                this.data[name].content.ionScroll.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => {
                    if (e.detail.scrollTop == 0) {
                        this.data[name].contentElem.style.paddingTop = 0;
                        this.data[name].contentEl.nativeElement.style.height = (this.data[name].contentHeight - (this.data[name].shrinkexpandHeight + supertabsToolbar.clientHeight)) + 'px';
                        this.data[name].contentEl.nativeElement.style.top = (this.data[name].shrinkexpandHeight + supertabsToolbar.clientHeight + this.data[name].paddingTop) + 'px';
                        elemPad.style.height = (this.data[name].elemPadHeight + this.data[name].shrinkexpandHeight + this.data[name].paddingTop + supertabsToolbar.clientHeight) + 'px';
                    }
                    else {
                        /** @type {?} */
                        let s = e.detail.scrollTop;
                        this.data[name].contentElem.style.paddingTop = (this.data[name].shrinkexpandHeight + supertabsToolbar.clientHeight + this.data[name].paddingTop) + 'px';
                        this.data[name].contentEl.nativeElement.style.height = (this.data[name].contentHeight + this.data[name].shrinkexpandHeight + supertabsToolbar.clientHeight) + 'px';
                        this.data[name].contentEl.nativeElement.style.top = null;
                        this.data[name].contentElem.scrollTop = s;
                        elemPad.style.height = this.data[name].elemPadHeight + 'px';
                    }
                    if (this.data[name].initExpanded) {
                        this.data[name].content.scrollToPoint(0, 0, 0).then((/**
                         * @return {?}
                         */
                        () => {
                            this.data[name].initExpanded = false;
                        }));
                    }
                    /** @type {?} */
                    let height = Math.max(Math.min(this.data[name].shrinkexpandHeight, this.data[name].shrinkexpandHeight - e.detail.scrollTop), this.data[name].shrinkexpandheaderHeight);
                    elem.style.transform = 'translate3d(0, ' + -(Math.min((this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight) / 2, e.detail.scrollTop / 2)) + 'px, 0)';
                    parentElem.style.height = height + 'px';
                    /** @type {?} */
                    let scrollFactor = Math.min(e.detail.scrollTop / (this.data[name].shrinkexpandHeight / 2), 1);
                    if (scrollFactor >= 0) {
                        /** @type {?} */
                        let currentValOpacity = overlay.style.getPropertyValue('--opacity');
                        /** @type {?} */
                        let newValOpacity = this.data[name].opacityFactor / 10 * scrollFactor;
                        if (currentValOpacity != newValOpacity)
                            overlay.style.setProperty('--opacity', newValOpacity);
                        /** @type {?} */
                        let currentValBlur = elem.style.getPropertyValue('--blur');
                        /** @type {?} */
                        let newValBlur = (this.data[name].blurFactor * scrollFactor) + 'px';
                        if (currentValBlur != newValBlur)
                            elem.style.setProperty('--blur', newValBlur);
                    }
                    supertabsToolbar.style.transform = 'translate3d(0, ' + height + 'px, 0)';
                    //event emitter
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data[name].guardEvents = false;
                    }), 10);
                    if (this.data[name].lastscroll != height && !this.data[name].guardEvents) {
                        this.scroll.next({ name: this.data[name].parent ? this.data[name].parent : name, height: height });
                    }
                    this.data[name].lastscroll = height;
                    //
                }));
                //catch the last tick
                this.data[name].content.ionScrollEnd.subscribe((/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        if (this.data[name].contentElem.scrollTop == 0) {
                            this.data[name].contentElem.style.paddingTop = 0;
                            this.data[name].contentEl.nativeElement.style.height = (this.data[name].contentHeight - (this.data[name].shrinkexpandHeight + supertabsToolbar.clientHeight)) + 'px';
                            this.data[name].contentEl.nativeElement.style.top = (this.data[name].shrinkexpandHeight + supertabsToolbar.clientHeight + this.data[name].paddingTop) + 'px';
                            elemPad.style.height = (this.data[name].elemPadHeight + this.data[name].shrinkexpandHeight + this.data[name].paddingTop + supertabsToolbar.clientHeight) + 'px';
                        }
                    }), 10);
                }));
            }));
        }));
    }
    /**
     * @param {?} name
     * @return {?}
     */
    resetContent(name) {
        if (!this.data[name].preserveHeader) {
            /** @type {?} */
            let parent = this.data[name].parent;
            /** @type {?} */
            let height = parseInt(this.data[parent].header.nativeElement.parentNode.style.height, 10);
            if (height <= this.data[name].shrinkexpandHeight && height > this.data[name].shrinkexpandheaderHeight || height == this.data[name].shrinkexpandheaderHeight && this.data[name].contentElem.scrollTop < (this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight)) {
                this.data[name].contentElem.scrollTop = this.data[name].shrinkexpandHeight - height;
            }
        }
        else {
            /** @type {?} */
            let parent = this.data[name].parent;
            /** @type {?} */
            let parentElem = this.data[parent].header.nativeElement.parentNode;
            /** @type {?} */
            let elem = this.data[parent].header.nativeElement;
            /** @type {?} */
            let tabscontentElem = this.data[parent].tabscontentElem;
            /** @type {?} */
            let supertabsToolbar = tabscontentElem.nativeElement.querySelector('super-tabs-toolbar');
            /** @type {?} */
            let overlay = this.data[parent].header.nativeElement.parentNode.querySelector('.overlay');
            /** @type {?} */
            let height = Math.max(Math.min(this.data[name].shrinkexpandHeight, this.data[name].shrinkexpandHeight - this.data[name].contentElem.scrollTop), this.data[name].shrinkexpandheaderHeight);
            elem.style.transform = 'translate3d(0, ' + -(Math.min((this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight) / 2, this.data[name].contentElem.scrollTop / 2)) + 'px, 0)';
            parentElem.style.height = height + 'px';
            overlay.style.setProperty('--opacity', this.data[name].opacityFactor / 10 * Math.min(this.data[name].contentElem.scrollTop / (this.data[name].shrinkexpandHeight / 2), 1));
            elem.style.setProperty('--blur', (this.data[name].blurFactor * Math.min(this.data[name].contentElem.scrollTop / (this.data[name].shrinkexpandHeight / 2), 1)) + 'px');
            supertabsToolbar.style.transform = 'translate3d(0, ' + height + 'px, 0)';
            this.scroll.next({ name: this.data[name].parent, height: height });
        }
    }
    /**
     * @param {?} parent
     * @return {?}
     */
    findCurrentTab(parent) {
        /** @type {?} */
        let i = this.data[parent].supertabs.activeTabIndex;
        /** @type {?} */
        let tabs = this.data[parent].tabscontentElem.nativeElement.querySelectorAll('super-tab');
        /** @type {?} */
        let results = [];
        for (let tab of tabs) {
            /** @type {?} */
            let cont = tab.querySelector('ion-content');
            if (cont.attributes['hidenav-sh-content'])
                results.push(cont.attributes['hidenav-sh-content'].nodeValue);
            else
                results.push(null);
        }
        if (results[i] != null) {
            return results[i];
        }
        return null;
    }
    /**
     * @param {?} parent
     * @param {?=} duration
     * @return {?}
     */
    expand(parent, duration = 200) {
        if (this.data[parent].content) {
            this.data[parent].content.scrollToPoint(0, 0, duration);
        }
        else {
            if (!this.data[parent].preserveHeader) {
                /** @type {?} */
                let names = [];
                for (let key in this.data) {
                    if (this.data[key].parent == parent)
                        names.push(key);
                }
                for (let name of names)
                    this.data[name].content.scrollToPoint(0, 0, duration);
            }
            else {
                /** @type {?} */
                let currentTab = this.findCurrentTab(parent);
                this.data[currentTab].content.scrollToPoint(0, 0, duration);
            }
        }
    }
    /**
     * @param {?} parent
     * @param {?=} duration
     * @return {?}
     */
    shrink(parent, duration = 200) {
        /** @type {?} */
        let height = parseInt(this.data[parent].header.nativeElement.parentNode.style.height, 10);
        if (height > this.data[parent].shrinkexpandheaderHeight) {
            if (this.data[parent].content) {
                this.data[parent].content.scrollToPoint(0, (this.data[parent].shrinkexpandHeight - this.data[parent].shrinkexpandheaderHeight), duration);
            }
            else {
                if (!this.data[parent].preserveHeader) {
                    /** @type {?} */
                    let names = [];
                    for (let key in this.data) {
                        if (this.data[key].parent == parent)
                            names.push(key);
                    }
                    for (let name of names) {
                        this.data[name].content.scrollToPoint(0, (this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight), duration);
                    }
                }
                else {
                    /** @type {?} */
                    let currentTab = this.findCurrentTab(parent);
                    this.data[currentTab].content.scrollToPoint(0, (this.data[currentTab].shrinkexpandHeight - this.data[currentTab].shrinkexpandheaderHeight), duration);
                }
            }
        }
    }
    /**
     * @param {?} parent
     * @param {?=} duration
     * @return {?}
     */
    toggle(parent, duration = 200) {
        if (this.data[parent].content) {
            /** @type {?} */
            let height = parseInt(this.data[parent].header.nativeElement.parentNode.style.height, 10);
            if (height < this.data[parent].shrinkexpandHeight)
                this.data[parent].content.scrollToPoint(0, 0, duration);
            else
                this.data[parent].content.scrollToPoint(0, (this.data[parent].shrinkexpandHeight - this.data[parent].shrinkexpandheaderHeight), duration);
        }
        else {
            if (!this.data[parent].preserveHeader) {
                /** @type {?} */
                let names = [];
                for (let key in this.data) {
                    if (this.data[key].parent == parent)
                        names.push(key);
                }
                /** @type {?} */
                let height = parseInt(this.data[parent].header.nativeElement.parentNode.style.height, 10);
                for (let name of names) {
                    if (height < this.data[name].shrinkexpandHeight)
                        this.data[name].content.scrollToPoint(0, 0, duration);
                    else
                        this.data[name].content.scrollToPoint(0, (this.data[name].shrinkexpandHeight - this.data[name].shrinkexpandheaderHeight), duration);
                }
            }
            else {
                /** @type {?} */
                let currentTab = this.findCurrentTab(parent);
                /** @type {?} */
                let height = parseInt(this.data[parent].header.nativeElement.parentNode.style.height, 10);
                if (height < this.data[currentTab].shrinkexpandHeight)
                    this.data[currentTab].content.scrollToPoint(0, 0, duration);
                else
                    this.data[currentTab].content.scrollToPoint(0, (this.data[currentTab].shrinkexpandHeight - this.data[currentTab].shrinkexpandheaderHeight), duration);
            }
        }
    }
}
HidenavShService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
HidenavShService.ctorParameters = () => [];
/** @nocollapse */ HidenavShService.ngInjectableDef = i0.defineInjectable({ factory: function HidenavShService_Factory() { return new HidenavShService(); }, token: HidenavShService, providedIn: "root" });
if (false) {
    /** @type {?} */
    HidenavShService.prototype.data;
    /** @type {?} */
    HidenavShService.prototype.mode;
    /** @type {?} */
    HidenavShService.prototype.names;
    /** @type {?} */
    HidenavShService.prototype.tabnames;
    /** @type {?} */
    HidenavShService.prototype.scroll;
}
//# sourceMappingURL=data:application/json;base64,