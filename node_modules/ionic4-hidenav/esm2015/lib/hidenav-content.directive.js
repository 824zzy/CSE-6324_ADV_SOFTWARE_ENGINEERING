/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Host, Self, Optional, ElementRef } from '@angular/core';
import { IonContent } from '@ionic/angular';
import { HidenavService } from './hidenav-service.service';
import $ from "jquery";
export class HidenavContentDirective {
    /**
     * @param {?} el
     * @param {?} contentElem
     * @param {?} globals
     */
    constructor(el, contentElem, globals) {
        this.el = el;
        this.contentElem = contentElem;
        this.globals = globals;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.contentElem.nativeElement.hasAttribute('hidenav-tabspage')) {
            this.name = this.globals.requestName();
            $(this.contentElem.nativeElement).attr('hidenav-content', this.name);
            $('[hidenav-header]', $(this.contentElem.nativeElement).parents().get().find((/**
             * @param {?} itm
             * @return {?}
             */
            itm => $(itm).find('[hidenav-header]').length))).attr('hidenav-header', this.name);
            this.start();
        }
        else {
            /** @type {?} */
            let counter = 0;
            /** @type {?} */
            let int = setInterval((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                let x = $(this.contentElem.nativeElement).closest('[hidenav-tabscontent]').attr('hidenav-tabscontent');
                counter++;
                if (x && x.length > 0) {
                    this.parent = $(this.contentElem.nativeElement).closest('[hidenav-tabscontent]').attr('hidenav-tabscontent');
                    this.name = this.globals.requestTabName(this.parent);
                    $(this.contentElem.nativeElement).attr('hidenav-content', this.name);
                    $(this.contentElem.nativeElement).attr('hidenav-tabspage', this.parent);
                    this.start();
                    clearInterval(int);
                }
                else if (counter > 50) {
                    clearInterval(int);
                }
            }), 50);
        }
    }
    /**
     * @return {?}
     */
    start() {
        if (this.name) {
            if (typeof this.globals.data[this.name] == 'undefined' || this.globals.data[this.name] == null)
                this.globals.data[this.name] = [];
            this.globals.data[this.name].content = this.el;
            this.globals.data[this.name].contentElem = this.contentElem;
            if (this.parent)
                this.globals.data[this.name].parent = this.parent;
            this.globals.initiate(this.name);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.name) {
            delete this.globals.data[this.name].content;
        }
    }
}
HidenavContentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hidenav-content]'
            },] }
];
HidenavContentDirective.ctorParameters = () => [
    { type: IonContent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
    { type: ElementRef },
    { type: HidenavService }
];
HidenavContentDirective.propDecorators = {
    hntb: [{ type: Input, args: ['hidenav-tabspage',] }]
};
if (false) {
    /** @type {?} */
    HidenavContentDirective.prototype.name;
    /** @type {?} */
    HidenavContentDirective.prototype.parent;
    /** @type {?} */
    HidenavContentDirective.prototype.hntb;
    /** @type {?} */
    HidenavContentDirective.prototype.el;
    /** @type {?} */
    HidenavContentDirective.prototype.contentElem;
    /**
     * @type {?}
     * @private
     */
    HidenavContentDirective.prototype.globals;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZW5hdi1jb250ZW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lvbmljNC1oaWRlbmF2LyIsInNvdXJjZXMiOlsibGliL2hpZGVuYXYtY29udGVudC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUt2QixNQUFNOzs7Ozs7SUFPRixZQUFnRCxFQUFjLEVBQVMsV0FBdUIsRUFBVSxPQUF1QjtRQUEvRSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVMsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFnQjtJQUUvSCxDQUFDOzs7O0lBRUQsZUFBZTtRQUNYLElBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsRUFBQztZQUNoRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDdkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyRSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSTs7OztZQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFD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Tk8sVUFBVSx1QkFjQSxJQUFJLFlBQUksSUFBSSxZQUFJLFFBQVE7WUFmTSxVQUFVO1lBRWxELGNBQWM7OzttQkFXakIsS0FBSyxTQUFDLGtCQUFrQjs7OztJQUh6Qix1Q0FBVTs7SUFDVix5Q0FBWTs7SUFFWix1Q0FBcUM7O0lBRXhCLHFDQUFpRDs7SUFBRSw4Q0FBOEI7Ozs7O0lBQUUsMENBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIElucHV0LCBIb3N0LCBTZWxmLCBPcHRpb25hbCwgRWxlbWVudFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0lvbkNvbnRlbnR9IGZyb20gJ0Bpb25pYy9hbmd1bGFyJztcbmltcG9ydCB7SGlkZW5hdlNlcnZpY2V9IGZyb20gJy4vaGlkZW5hdi1zZXJ2aWNlLnNlcnZpY2UnO1xuaW1wb3J0ICQgZnJvbSBcImpxdWVyeVwiO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaGlkZW5hdi1jb250ZW50XSdcbn0pXG5leHBvcnQgY2xhc3MgSGlkZW5hdkNvbnRlbnREaXJlY3RpdmUge1xuXG4gICAgbmFtZTogYW55O1xuICAgIHBhcmVudDogYW55O1xuXG4gICAgQElucHV0KCdoaWRlbmF2LXRhYnNwYWdlJykgaG50YjogYW55O1xuXG4gICAgY29uc3RydWN0b3IoIEBIb3N0KCkgQFNlbGYoKSBAT3B0aW9uYWwoKSBwdWJsaWMgZWw6IElvbkNvbnRlbnQsIHB1YmxpYyBjb250ZW50RWxlbTogRWxlbWVudFJlZiwgcHJpdmF0ZSBnbG9iYWxzOiBIaWRlbmF2U2VydmljZSkge1xuXG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICBpZighdGhpcy5jb250ZW50RWxlbS5uYXRpdmVFbGVtZW50Lmhhc0F0dHJpYnV0ZSgnaGlkZW5hdi10YWJzcGFnZScpKXtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2xvYmFscy5yZXF1ZXN0TmFtZSgpO1xuICAgICAgICAgICAgJCh0aGlzLmNvbnRlbnRFbGVtLm5hdGl2ZUVsZW1lbnQpLmF0dHIoJ2hpZGVuYXYtY29udGVudCcsIHRoaXMubmFtZSk7XG4gICAgICAgICAgICAkKCdbaGlkZW5hdi1oZWFkZXJdJywgJCh0aGlzLmNvbnRlbnRFbGVtLm5hdGl2ZUVsZW1lbnQpLnBhcmVudHMoKS5nZXQoKS5maW5kKGl0bSA9PiAkKGl0bSkuZmluZCgnW2hpZGVuYXYtaGVhZGVyXScpLmxlbmd0aCkpLmF0dHIoJ2hpZGVuYXYtaGVhZGVyJywgdGhpcy5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBsZXQgY291bnRlciA9IDA7XG4gICAgICAgICAgICBsZXQgaW50ID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gJCh0aGlzLmNvbnRlbnRFbGVtLm5hdGl2ZUVsZW1lbnQpLmNsb3Nlc3QoJ1toaWRlbmF2LXRhYnNjb250ZW50XScpLmF0dHIoJ2hpZGVuYXYtdGFic2NvbnRlbnQnKTtcbiAgICAgICAgICAgICAgICBjb3VudGVyKys7XG4gICAgICAgICAgICAgICAgaWYoeCAmJiB4Lmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCA9ICQodGhpcy5jb250ZW50RWxlbS5uYXRpdmVFbGVtZW50KS5jbG9zZXN0KCdbaGlkZW5hdi10YWJzY29udGVudF0nKS5hdHRyKCdoaWRlbmF2LXRhYnNjb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2xvYmFscy5yZXF1ZXN0VGFiTmFtZSh0aGlzLnBhcmVudCk7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcy5jb250ZW50RWxlbS5uYXRpdmVFbGVtZW50KS5hdHRyKCdoaWRlbmF2LWNvbnRlbnQnLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMuY29udGVudEVsZW0ubmF0aXZlRWxlbWVudCkuYXR0cignaGlkZW5hdi10YWJzcGFnZScsIHRoaXMucGFyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludCk7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYoY291bnRlciA+IDUwKXtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDUwKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmKHRoaXMubmFtZSl7XG4gICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXSA9PSAndW5kZWZpbmVkJyB8fCB0aGlzLmdsb2JhbHMuZGF0YVt0aGlzLm5hbWVdID09IG51bGwpXG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXS5jb250ZW50ID0gdGhpcy5lbDtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0uY29udGVudEVsZW0gPSB0aGlzLmNvbnRlbnRFbGVtO1xuICAgICAgICAgICAgaWYodGhpcy5wYXJlbnQpXG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXS5wYXJlbnQgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5pbml0aWF0ZSh0aGlzLm5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGlmKHRoaXMubmFtZSl7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXS5jb250ZW50O1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=