/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Host, Self, Optional, ElementRef, ContentChild } from '@angular/core';
import { IonContent } from '@ionic/angular';
import { SuperTabs } from '@ionic-super-tabs/angular';
import { HidenavShService } from './hidenav-sh-service.service';
import $ from 'jquery';
export class HidenavShTabscontentDirective {
    /**
     * @param {?} contentElem
     * @param {?} el
     * @param {?} globals
     */
    constructor(contentElem, el, globals) {
        this.contentElem = contentElem;
        this.el = el;
        this.globals = globals;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.name = this.globals.requestName();
        this.contentElem.nativeElement.setAttribute('hidenav-sh-tabscontent', this.name);
        $('hidenav-stretchheader', $(this.contentElem.nativeElement).parents().get().find((/**
         * @param {?} itm
         * @return {?}
         */
        itm => $(itm).find('[hidenav-stretchheader]').length))).attr('hidenav-sh-header', this.name);
        if (this.name) {
            if (typeof this.globals.data[this.name] == 'undefined' || this.globals.data[this.name] == null)
                this.globals.data[this.name] = [];
            this.globals.data[this.name].tabscontent = this.el;
            this.globals.data[this.name].tabscontentElem = this.contentElem;
            this.globals.data[this.name].supertabs = this.supertabs;
            this.globals.initiate(this.name);
            this.supertabs.tabChange.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                /** @type {?} */
                let i = e.detail.index;
                /** @type {?} */
                let tabs = this.contentElem.nativeElement.querySelectorAll('super-tab');
                /** @type {?} */
                let results = [];
                for (let tab of tabs) {
                    /** @type {?} */
                    let cont = tab.querySelector('ion-content');
                    if (cont != null && typeof cont.attributes['hidenav-sh-content'] != 'undefined' && cont.attributes['hidenav-sh-content'].nodeValue != '')
                        results.push(cont.attributes['hidenav-sh-content'].nodeValue);
                    else
                        results.push(null);
                }
                if (results[i] != null) {
                    this.globals.resetContent(results[i]);
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        delete this.globals.data[this.name].tabscontent;
    }
}
HidenavShTabscontentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hidenav-sh-tabscontent]'
            },] }
];
HidenavShTabscontentDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: IonContent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
    { type: HidenavShService }
];
HidenavShTabscontentDirective.propDecorators = {
    supertabs: [{ type: ContentChild, args: [SuperTabs,] }]
};
if (false) {
    /** @type {?} */
    HidenavShTabscontentDirective.prototype.name;
    /** @type {?} */
    HidenavShTabscontentDirective.prototype.supertabs;
    /** @type {?} */
    HidenavShTabscontentDirective.prototype.contentElem;
    /** @type {?} */
    HidenavShTabscontentDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    HidenavShTabscontentDirective.prototype.globals;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZW5hdi1zaC10YWJzY29udGVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pb25pYzQtaGlkZW5hdi8iLCJzb3VyY2VzIjpbImxpYi9oaWRlbmF2LXNoLXRhYnNjb250ZW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDcEQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBS3ZCLE1BQU07Ozs7OztJQUtGLFlBQW1CLFdBQXVCLEVBQXFDLEVBQWMsRUFBVSxPQUF5QjtRQUE3RyxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUFxQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7SUFFaEksQ0FBQzs7OztJQUVELGVBQWU7UUFDWCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRixDQUFDLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSTs7OztRQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5SyxJQUFHLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVixJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSTtnQkFDMUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDbkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUN4RCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUzs7OztZQUFDLENBQUMsQ0FBQyxFQUFFOztvQkFDL0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSzs7b0JBQ2xCLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7O29CQUNuRSxPQUFPLEdBQUcsRUFBRTtnQkFDaEIsS0FBSyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7O3dCQUNkLElBQUksR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQztvQkFDM0MsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUyxJQUFJLEVBQUU7d0JBQ3BJLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDOzt3QkFFOUQsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDMUI7Z0JBQ0QsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO29CQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDekM7WUFDTCxDQUFDLEVBQUMsQ0FBQTtTQUNMO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDcEQsQ0FBQzs7O1lBNUNKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMEJBQTBCO2FBQ3ZDOzs7WUFSd0MsVUFBVTtZQUMzQyxVQUFVLHVCQWErQixJQUFJLFlBQUksSUFBSSxZQUFJLFFBQVE7WUFYakUsZ0JBQWdCOzs7d0JBU25CLFlBQVksU0FBQyxTQUFTOzs7O0lBRHZCLDZDQUFVOztJQUNWLGtEQUE4Qzs7SUFFbEMsb0RBQThCOztJQUFFLDJDQUFpRDs7Ozs7SUFBRSxnREFBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSG9zdCwgU2VsZiwgT3B0aW9uYWwsIEVsZW1lbnRSZWYsIENvbnRlbnRDaGlsZH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7SW9uQ29udGVudH0gZnJvbSAnQGlvbmljL2FuZ3VsYXInO1xyXG5pbXBvcnQge1N1cGVyVGFic30gZnJvbSAnQGlvbmljLXN1cGVyLXRhYnMvYW5ndWxhcic7XHJcbmltcG9ydCB7SGlkZW5hdlNoU2VydmljZX0gZnJvbSAnLi9oaWRlbmF2LXNoLXNlcnZpY2Uuc2VydmljZSc7XHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2hpZGVuYXYtc2gtdGFic2NvbnRlbnRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSGlkZW5hdlNoVGFic2NvbnRlbnREaXJlY3RpdmUge1xyXG5cclxuICAgIG5hbWU6IGFueTtcclxuICAgIEBDb250ZW50Q2hpbGQoU3VwZXJUYWJzKSBzdXBlcnRhYnM6IFN1cGVyVGFicztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgY29udGVudEVsZW06IEVsZW1lbnRSZWYsIEBIb3N0KCkgQFNlbGYoKSBAT3B0aW9uYWwoKSBwdWJsaWMgZWw6IElvbkNvbnRlbnQsIHByaXZhdGUgZ2xvYmFsczogSGlkZW5hdlNoU2VydmljZSkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nbG9iYWxzLnJlcXVlc3ROYW1lKCk7XHJcbiAgICAgICAgdGhpcy5jb250ZW50RWxlbS5uYXRpdmVFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGlkZW5hdi1zaC10YWJzY29udGVudCcsIHRoaXMubmFtZSk7XHJcbiAgICAgICAgJCgnaGlkZW5hdi1zdHJldGNoaGVhZGVyJywgJCh0aGlzLmNvbnRlbnRFbGVtLm5hdGl2ZUVsZW1lbnQpLnBhcmVudHMoKS5nZXQoKS5maW5kKGl0bSA9PiAkKGl0bSkuZmluZCgnW2hpZGVuYXYtc3RyZXRjaGhlYWRlcl0nKS5sZW5ndGgpKS5hdHRyKCdoaWRlbmF2LXNoLWhlYWRlcicsIHRoaXMubmFtZSk7XHJcbiAgICAgICAgaWYodGhpcy5uYW1lKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXSA9PSAndW5kZWZpbmVkJyB8fCB0aGlzLmdsb2JhbHMuZGF0YVt0aGlzLm5hbWVdID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsb2JhbHMuZGF0YVt0aGlzLm5hbWVdID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0udGFic2NvbnRlbnQgPSB0aGlzLmVsO1xyXG4gICAgICAgICAgICB0aGlzLmdsb2JhbHMuZGF0YVt0aGlzLm5hbWVdLnRhYnNjb250ZW50RWxlbSA9IHRoaXMuY29udGVudEVsZW07XHJcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0uc3VwZXJ0YWJzID0gdGhpcy5zdXBlcnRhYnM7XHJcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5pbml0aWF0ZSh0aGlzLm5hbWUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdXBlcnRhYnMudGFiQ2hhbmdlLnN1YnNjcmliZShlID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gZS5kZXRhaWwuaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFicyA9IHRoaXMuY29udGVudEVsZW0ubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdXBlci10YWInKTtcclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHRzID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB0YWIgb2YgdGFicykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb250ID0gdGFiLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1jb250ZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnQgIT0gbnVsbCAmJiB0eXBlb2YgY29udC5hdHRyaWJ1dGVzWydoaWRlbmF2LXNoLWNvbnRlbnQnXSAhPSAndW5kZWZpbmVkJyAmJiBjb250LmF0dHJpYnV0ZXNbJ2hpZGVuYXYtc2gtY29udGVudCddLm5vZGVWYWx1ZSAhPSAnJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGNvbnQuYXR0cmlidXRlc1snaGlkZW5hdi1zaC1jb250ZW50J10ubm9kZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzW2ldICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsb2JhbHMucmVzZXRDb250ZW50KHJlc3VsdHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXS50YWJzY29udGVudDtcclxuICAgIH1cclxuXHJcbn1cclxuIl19