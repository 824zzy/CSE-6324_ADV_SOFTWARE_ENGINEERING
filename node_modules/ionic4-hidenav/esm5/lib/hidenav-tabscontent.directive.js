/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Host, Self, Optional, ElementRef, ContentChild, forwardRef } from '@angular/core';
import { IonContent } from '@ionic/angular';
import { HidenavService } from './hidenav-service.service';
import { SuperTabs } from '@ionic-super-tabs/angular';
import $ from 'jquery';
var HidenavTabscontentDirective = /** @class */ (function () {
    function HidenavTabscontentDirective(el, contentElem, globals) {
        this.el = el;
        this.contentElem = contentElem;
        this.globals = globals;
    }
    /**
     * @return {?}
     */
    HidenavTabscontentDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.name = this.globals.requestName();
        this.contentElem.nativeElement.setAttribute('hidenav-tabscontent', this.name);
        $('[hidenav-header]', $(this.contentElem.nativeElement).parents().get().find((/**
         * @param {?} itm
         * @return {?}
         */
        function (itm) { return $(itm).find('[hidenav-header]').length; }))).attr('hidenav-header', this.name);
        if (this.name) {
            if (typeof this.globals.data[this.name] == 'undefined' || this.globals.data[this.name] == null)
                this.globals.data[this.name] = [];
            this.globals.data[this.name].tabscontent = this.el;
            this.globals.data[this.name].tabscontentElem = this.contentElem;
            this.globals.initiate(this.name);
            if (this.supertabs) {
                this.supertabs.tabChange.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    var e_1, _a;
                    if (e.detail.changed == true) {
                        /** @type {?} */
                        var i = e.detail.index;
                        /** @type {?} */
                        var tabs = _this.contentElem.nativeElement.querySelectorAll('super-tab');
                        /** @type {?} */
                        var results = [];
                        try {
                            for (var tabs_1 = tslib_1.__values(tabs), tabs_1_1 = tabs_1.next(); !tabs_1_1.done; tabs_1_1 = tabs_1.next()) {
                                var tab = tabs_1_1.value;
                                /** @type {?} */
                                var cont = tab.querySelector('ion-content');
                                if (cont.attributes['hidenav-content'])
                                    results.push(cont.attributes['hidenav-content'].nodeValue);
                                else
                                    results.push(null);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (tabs_1_1 && !tabs_1_1.done && (_a = tabs_1.return)) _a.call(tabs_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        if (results[i] != null) {
                            _this.globals.resetTabs(_this.name, results[i]);
                        }
                    }
                }));
            }
        }
    };
    /**
     * @return {?}
     */
    HidenavTabscontentDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.name) {
            delete this.globals.data[this.name].tabscontent;
        }
    };
    HidenavTabscontentDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[hidenav-tabscontent]'
                },] }
    ];
    HidenavTabscontentDirective.ctorParameters = function () { return [
        { type: IonContent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
        { type: ElementRef },
        { type: HidenavService }
    ]; };
    HidenavTabscontentDirective.propDecorators = {
        supertabs: [{ type: ContentChild, args: [forwardRef((/**
                     * @return {?}
                     */
                    function () { return SuperTabs; })),] }]
    };
    return HidenavTabscontentDirective;
}());
export { HidenavTabscontentDirective };
if (false) {
    /** @type {?} */
    HidenavTabscontentDirective.prototype.supertabs;
    /** @type {?} */
    HidenavTabscontentDirective.prototype.name;
    /** @type {?} */
    HidenavTabscontentDirective.prototype.el;
    /** @type {?} */
    HidenavTabscontentDirective.prototype.contentElem;
    /**
     * @type {?}
     * @private
     */
    HidenavTabscontentDirective.prototype.globals;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZW5hdi10YWJzY29udGVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pb25pYzQtaGlkZW5hdi8iLCJzb3VyY2VzIjpbImxpYi9oaWRlbmF2LXRhYnNjb250ZW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEcsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDcEQsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBRXZCO0lBU0kscUNBQStDLEVBQWMsRUFBUyxXQUF1QixFQUFVLE9BQXVCO1FBQS9FLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBUyxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWdCO0lBRTlILENBQUM7Ozs7SUFFRCxxREFBZTs7O0lBQWY7UUFBQSxpQkFnQ0M7UUEvQkcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUUsQ0FBQyxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxNQUFNLEVBQXRDLENBQXNDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0osSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gsSUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUk7Z0JBQzFGLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ25ELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUNoRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFakMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTOzs7O2dCQUFDLFVBQUEsQ0FBQzs7b0JBQ2hDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFOzs0QkFDdEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSzs7NEJBQ2xCLElBQUksR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7OzRCQUNuRSxPQUFPLEdBQUcsRUFBRTs7NEJBQ2hCLEtBQWdCLElBQUEsU0FBQSxpQkFBQSxJQUFJLENBQUEsMEJBQUEsNENBQUU7Z0NBQWpCLElBQUksR0FBRyxpQkFBQTs7b0NBQ0osSUFBSSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO2dDQUMzQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUM7b0NBQ2xDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztvQ0FFM0QsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs2QkFDMUI7Ozs7Ozs7Ozt3QkFDRCxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUU7NEJBQ3BCLEtBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7eUJBRWpEO3FCQUNKO2dCQUNMLENBQUMsRUFBQyxDQUFDO2FBQ047U0FDSjtJQUNMLENBQUM7Ozs7SUFFRCxpREFBVzs7O0lBQVg7UUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUM7U0FDbkQ7SUFDTCxDQUFDOztnQkFuREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx1QkFBdUI7aUJBQ3BDOzs7Z0JBUE8sVUFBVSx1QkFjRCxJQUFJLFlBQUksSUFBSSxZQUFJLFFBQVE7Z0JBZkEsVUFBVTtnQkFFM0MsY0FBYzs7OzRCQVNqQixZQUFZLFNBQUMsVUFBVTs7O29CQUFDLGNBQU0sT0FBQSxTQUFTLEVBQVQsQ0FBUyxFQUFDOztJQWdEN0Msa0NBQUM7Q0FBQSxBQXJERCxJQXFEQztTQWxEWSwyQkFBMkI7OztJQUVwQyxnREFBZ0U7O0lBRWhFLDJDQUFVOztJQUVFLHlDQUFpRDs7SUFBRSxrREFBOEI7Ozs7O0lBQUUsOENBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEhvc3QsIFNlbGYsIE9wdGlvbmFsLCBFbGVtZW50UmVmLCBDb250ZW50Q2hpbGQsIGZvcndhcmRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0lvbkNvbnRlbnR9IGZyb20gJ0Bpb25pYy9hbmd1bGFyJztcclxuaW1wb3J0IHtIaWRlbmF2U2VydmljZX0gZnJvbSAnLi9oaWRlbmF2LXNlcnZpY2Uuc2VydmljZSc7XHJcbmltcG9ydCB7U3VwZXJUYWJzfSBmcm9tICdAaW9uaWMtc3VwZXItdGFicy9hbmd1bGFyJztcclxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbaGlkZW5hdi10YWJzY29udGVudF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIaWRlbmF2VGFic2NvbnRlbnREaXJlY3RpdmUge1xyXG5cclxuICAgIEBDb250ZW50Q2hpbGQoZm9yd2FyZFJlZigoKSA9PiBTdXBlclRhYnMpKSBzdXBlcnRhYnM6IFN1cGVyVGFicztcclxuXHJcbiAgICBuYW1lOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoQEhvc3QoKSBAU2VsZigpIEBPcHRpb25hbCgpIHB1YmxpYyBlbDogSW9uQ29udGVudCwgcHVibGljIGNvbnRlbnRFbGVtOiBFbGVtZW50UmVmLCBwcml2YXRlIGdsb2JhbHM6IEhpZGVuYXZTZXJ2aWNlKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdsb2JhbHMucmVxdWVzdE5hbWUoKTtcclxuICAgICAgICB0aGlzLmNvbnRlbnRFbGVtLm5hdGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdoaWRlbmF2LXRhYnNjb250ZW50JywgdGhpcy5uYW1lKTtcclxuICAgICAgICAkKCdbaGlkZW5hdi1oZWFkZXJdJywgJCh0aGlzLmNvbnRlbnRFbGVtLm5hdGl2ZUVsZW1lbnQpLnBhcmVudHMoKS5nZXQoKS5maW5kKGl0bSA9PiAkKGl0bSkuZmluZCgnW2hpZGVuYXYtaGVhZGVyXScpLmxlbmd0aCkpLmF0dHIoJ2hpZGVuYXYtaGVhZGVyJywgdGhpcy5uYW1lKTtcclxuICAgICAgICBpZiAodGhpcy5uYW1lKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXSA9PSAndW5kZWZpbmVkJyB8fCB0aGlzLmdsb2JhbHMuZGF0YVt0aGlzLm5hbWVdID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsb2JhbHMuZGF0YVt0aGlzLm5hbWVdID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0udGFic2NvbnRlbnQgPSB0aGlzLmVsO1xyXG4gICAgICAgICAgICB0aGlzLmdsb2JhbHMuZGF0YVt0aGlzLm5hbWVdLnRhYnNjb250ZW50RWxlbSA9IHRoaXMuY29udGVudEVsZW07XHJcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5pbml0aWF0ZSh0aGlzLm5hbWUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3VwZXJ0YWJzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1cGVydGFicy50YWJDaGFuZ2Uuc3Vic2NyaWJlKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmRldGFpbC5jaGFuZ2VkID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSBlLmRldGFpbC5pbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRhYnMgPSB0aGlzLmNvbnRlbnRFbGVtLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3VwZXItdGFiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHRhYiBvZiB0YWJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29udCA9IHRhYi5xdWVyeVNlbGVjdG9yKCdpb24tY29udGVudCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnQuYXR0cmlidXRlc1snaGlkZW5hdi1jb250ZW50J10pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGNvbnQuYXR0cmlidXRlc1snaGlkZW5hdi1jb250ZW50J10ubm9kZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdHNbaV0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxzLnJlc2V0VGFicyh0aGlzLm5hbWUsIHJlc3VsdHNbaV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLm5hbWUpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0udGFic2NvbnRlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=