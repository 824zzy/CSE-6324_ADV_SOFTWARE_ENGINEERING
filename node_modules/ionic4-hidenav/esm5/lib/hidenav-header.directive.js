/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef } from '@angular/core';
import { HidenavService } from './hidenav-service.service';
var HidenavHeaderDirective = /** @class */ (function () {
    function HidenavHeaderDirective(el, globals) {
        this.el = el;
        this.globals = globals;
    }
    /**
     * @return {?}
     */
    HidenavHeaderDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var observer = new MutationObserver((/**
         * @param {?} mutations
         * @return {?}
         */
        function (mutations) {
            mutations.forEach((/**
             * @return {?}
             */
            function () {
                if (_this.el.nativeElement.getAttribute('hidenav-header').length > 0) {
                    _this.name = _this.el.nativeElement.getAttribute('hidenav-header');
                    _this.start();
                    observer.disconnect();
                }
            }));
        }));
        observer.observe(this.el.nativeElement, {
            attributes: true,
        });
    };
    /**
     * @return {?}
     */
    HidenavHeaderDirective.prototype.start = /**
     * @return {?}
     */
    function () {
        if (this.name) {
            if (typeof this.globals.data[this.name] == 'undefined' || this.globals.data[this.name] == null)
                this.globals.data[this.name] = [];
            if (this.globals.data[this.name].header != null)
                return false;
            this.globals.data[this.name].header = this.el;
            this.globals.initiate(this.name);
        }
    };
    /**
     * @return {?}
     */
    HidenavHeaderDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.name) {
            delete this.globals.data[this.name].header;
        }
    };
    HidenavHeaderDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[hidenav-header]'
                },] }
    ];
    HidenavHeaderDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: HidenavService }
    ]; };
    return HidenavHeaderDirective;
}());
export { HidenavHeaderDirective };
if (false) {
    /** @type {?} */
    HidenavHeaderDirective.prototype.name;
    /** @type {?} */
    HidenavHeaderDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    HidenavHeaderDirective.prototype.globals;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZW5hdi1oZWFkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaW9uaWM0LWhpZGVuYXYvIiwic291cmNlcyI6WyJsaWIvaGlkZW5hdi1oZWFkZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFFekQ7SUFPSSxnQ0FBb0IsRUFBYyxFQUFVLE9BQXVCO1FBQS9DLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFnQjtJQUVuRSxDQUFDOzs7O0lBRUQsZ0RBQWU7OztJQUFmO1FBQUEsaUJBYUM7O1lBWlMsUUFBUSxHQUFHLElBQUksZ0JBQWdCOzs7O1FBQUMsVUFBQyxTQUFTO1lBQzVDLFNBQVMsQ0FBQyxPQUFPOzs7WUFBQztnQkFDZCxJQUFHLEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ2hFLEtBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUM7b0JBQ2pFLEtBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDYixRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7aUJBQ3pCO1lBQ0wsQ0FBQyxFQUFDLENBQUM7UUFDUCxDQUFDLEVBQUM7UUFDRixRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFO1lBQ3BDLFVBQVUsRUFBRSxJQUFJO1NBQ25CLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFRCxzQ0FBSzs7O0lBQUw7UUFDSSxJQUFHLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVixJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSTtnQkFDMUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN0QyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSTtnQkFDM0MsT0FBTyxLQUFLLENBQUM7WUFDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQzlDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNwQztJQUNMLENBQUM7Ozs7SUFFRCw0Q0FBVzs7O0lBQVg7UUFDSSxJQUFHLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUM7U0FDOUM7SUFDTCxDQUFDOztnQkF6Q0osU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7aUJBQzdCOzs7Z0JBTGtCLFVBQVU7Z0JBQ3JCLGNBQWM7O0lBNkN0Qiw2QkFBQztDQUFBLEFBM0NELElBMkNDO1NBeENZLHNCQUFzQjs7O0lBRS9CLHNDQUFVOztJQUVHLG9DQUFxQjs7Ozs7SUFBRSx5Q0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0hpZGVuYXZTZXJ2aWNlfSBmcm9tICcuL2hpZGVuYXYtc2VydmljZS5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2hpZGVuYXYtaGVhZGVyXSdcbn0pXG5leHBvcnQgY2xhc3MgSGlkZW5hdkhlYWRlckRpcmVjdGl2ZSB7XG5cbiAgICBuYW1lOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvciggcHVibGljIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIGdsb2JhbHM6IEhpZGVuYXZTZXJ2aWNlKSB7XG5cbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucykgPT4ge1xuICAgICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuZWwubmF0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hpZGVuYXYtaGVhZGVyJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdoaWRlbmF2LWhlYWRlcicpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYodGhpcy5uYW1lKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0gPT0gJ3VuZGVmaW5lZCcgfHwgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXSA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0gPSBbXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsb2JhbHMuZGF0YVt0aGlzLm5hbWVdLmhlYWRlciAhPSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0uaGVhZGVyID0gdGhpcy5lbDtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5pbml0aWF0ZSh0aGlzLm5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGlmKHRoaXMubmFtZSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0uaGVhZGVyO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=