/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Host, Self, Optional, ElementRef, ContentChild } from '@angular/core';
import { IonContent } from '@ionic/angular';
import { SuperTabs } from '@ionic-super-tabs/angular';
import { HidenavShService } from './hidenav-sh-service.service';
import $ from 'jquery';
var HidenavShTabscontentDirective = /** @class */ (function () {
    function HidenavShTabscontentDirective(contentElem, el, globals) {
        this.contentElem = contentElem;
        this.el = el;
        this.globals = globals;
    }
    /**
     * @return {?}
     */
    HidenavShTabscontentDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.name = this.globals.requestName();
        this.contentElem.nativeElement.setAttribute('hidenav-sh-tabscontent', this.name);
        $('hidenav-stretchheader', $(this.contentElem.nativeElement).parents().get().find((/**
         * @param {?} itm
         * @return {?}
         */
        function (itm) { return $(itm).find('[hidenav-stretchheader]').length; }))).attr('hidenav-sh-header', this.name);
        if (this.name) {
            if (typeof this.globals.data[this.name] == 'undefined' || this.globals.data[this.name] == null)
                this.globals.data[this.name] = [];
            this.globals.data[this.name].tabscontent = this.el;
            this.globals.data[this.name].tabscontentElem = this.contentElem;
            this.globals.data[this.name].supertabs = this.supertabs;
            this.globals.initiate(this.name);
            this.supertabs.tabChange.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                var e_1, _a;
                /** @type {?} */
                var i = e.detail.index;
                /** @type {?} */
                var tabs = _this.contentElem.nativeElement.querySelectorAll('super-tab');
                /** @type {?} */
                var results = [];
                try {
                    for (var tabs_1 = tslib_1.__values(tabs), tabs_1_1 = tabs_1.next(); !tabs_1_1.done; tabs_1_1 = tabs_1.next()) {
                        var tab = tabs_1_1.value;
                        /** @type {?} */
                        var cont = tab.querySelector('ion-content');
                        if (cont != null && typeof cont.attributes['hidenav-sh-content'] != 'undefined' && cont.attributes['hidenav-sh-content'].nodeValue != '')
                            results.push(cont.attributes['hidenav-sh-content'].nodeValue);
                        else
                            results.push(null);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (tabs_1_1 && !tabs_1_1.done && (_a = tabs_1.return)) _a.call(tabs_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (results[i] != null) {
                    _this.globals.resetContent(results[i]);
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    HidenavShTabscontentDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        delete this.globals.data[this.name].tabscontent;
    };
    HidenavShTabscontentDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[hidenav-sh-tabscontent]'
                },] }
    ];
    HidenavShTabscontentDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IonContent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
        { type: HidenavShService }
    ]; };
    HidenavShTabscontentDirective.propDecorators = {
        supertabs: [{ type: ContentChild, args: [SuperTabs,] }]
    };
    return HidenavShTabscontentDirective;
}());
export { HidenavShTabscontentDirective };
if (false) {
    /** @type {?} */
    HidenavShTabscontentDirective.prototype.name;
    /** @type {?} */
    HidenavShTabscontentDirective.prototype.supertabs;
    /** @type {?} */
    HidenavShTabscontentDirective.prototype.contentElem;
    /** @type {?} */
    HidenavShTabscontentDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    HidenavShTabscontentDirective.prototype.globals;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZW5hdi1zaC10YWJzY29udGVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pb25pYzQtaGlkZW5hdi8iLCJzb3VyY2VzIjpbImxpYi9oaWRlbmF2LXNoLXRhYnNjb250ZW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3BELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQzlELE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUV2QjtJQVFJLHVDQUFtQixXQUF1QixFQUFxQyxFQUFjLEVBQVUsT0FBeUI7UUFBN0csZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFBcUMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWtCO0lBRWhJLENBQUM7Ozs7SUFFRCx1REFBZTs7O0lBQWY7UUFBQSxpQkE0QkM7UUEzQkcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakYsQ0FBQyxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxNQUFNLEVBQTdDLENBQTZDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUssSUFBRyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1YsSUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUk7Z0JBQzFGLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ25ELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUNoRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDeEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRWpDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVM7Ozs7WUFBQyxVQUFBLENBQUM7OztvQkFDNUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSzs7b0JBQ2xCLElBQUksR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7O29CQUNuRSxPQUFPLEdBQUcsRUFBRTs7b0JBQ2hCLEtBQWdCLElBQUEsU0FBQSxpQkFBQSxJQUFJLENBQUEsMEJBQUEsNENBQUU7d0JBQWpCLElBQUksR0FBRyxpQkFBQTs7NEJBQ0osSUFBSSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO3dCQUMzQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLElBQUksV0FBVyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxTQUFTLElBQUksRUFBRTs0QkFDcEksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7OzRCQUU5RCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUMxQjs7Ozs7Ozs7O2dCQUNELElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTtvQkFDcEIsS0FBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3pDO1lBQ0wsQ0FBQyxFQUFDLENBQUE7U0FDTDtJQUNMLENBQUM7Ozs7SUFFRCxtREFBVzs7O0lBQVg7UUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDcEQsQ0FBQzs7Z0JBNUNKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsMEJBQTBCO2lCQUN2Qzs7O2dCQVJ3QyxVQUFVO2dCQUMzQyxVQUFVLHVCQWErQixJQUFJLFlBQUksSUFBSSxZQUFJLFFBQVE7Z0JBWGpFLGdCQUFnQjs7OzRCQVNuQixZQUFZLFNBQUMsU0FBUzs7SUF3QzNCLG9DQUFDO0NBQUEsQUE5Q0QsSUE4Q0M7U0EzQ1ksNkJBQTZCOzs7SUFFdEMsNkNBQVU7O0lBQ1Ysa0RBQThDOztJQUVsQyxvREFBOEI7O0lBQUUsMkNBQWlEOzs7OztJQUFFLGdEQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0LCBTZWxmLCBPcHRpb25hbCwgRWxlbWVudFJlZiwgQ29udGVudENoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtJb25Db250ZW50fSBmcm9tICdAaW9uaWMvYW5ndWxhcic7XHJcbmltcG9ydCB7U3VwZXJUYWJzfSBmcm9tICdAaW9uaWMtc3VwZXItdGFicy9hbmd1bGFyJztcclxuaW1wb3J0IHtIaWRlbmF2U2hTZXJ2aWNlfSBmcm9tICcuL2hpZGVuYXYtc2gtc2VydmljZS5zZXJ2aWNlJztcclxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbaGlkZW5hdi1zaC10YWJzY29udGVudF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIaWRlbmF2U2hUYWJzY29udGVudERpcmVjdGl2ZSB7XHJcblxyXG4gICAgbmFtZTogYW55O1xyXG4gICAgQENvbnRlbnRDaGlsZChTdXBlclRhYnMpIHN1cGVydGFiczogU3VwZXJUYWJzO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBjb250ZW50RWxlbTogRWxlbWVudFJlZiwgQEhvc3QoKSBAU2VsZigpIEBPcHRpb25hbCgpIHB1YmxpYyBlbDogSW9uQ29udGVudCwgcHJpdmF0ZSBnbG9iYWxzOiBIaWRlbmF2U2hTZXJ2aWNlKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdsb2JhbHMucmVxdWVzdE5hbWUoKTtcclxuICAgICAgICB0aGlzLmNvbnRlbnRFbGVtLm5hdGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdoaWRlbmF2LXNoLXRhYnNjb250ZW50JywgdGhpcy5uYW1lKTtcclxuICAgICAgICAkKCdoaWRlbmF2LXN0cmV0Y2hoZWFkZXInLCAkKHRoaXMuY29udGVudEVsZW0ubmF0aXZlRWxlbWVudCkucGFyZW50cygpLmdldCgpLmZpbmQoaXRtID0+ICQoaXRtKS5maW5kKCdbaGlkZW5hdi1zdHJldGNoaGVhZGVyXScpLmxlbmd0aCkpLmF0dHIoJ2hpZGVuYXYtc2gtaGVhZGVyJywgdGhpcy5uYW1lKTtcclxuICAgICAgICBpZih0aGlzLm5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmdsb2JhbHMuZGF0YVt0aGlzLm5hbWVdID09ICd1bmRlZmluZWQnIHx8IHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0gPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0gPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXS50YWJzY29udGVudCA9IHRoaXMuZWw7XHJcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5kYXRhW3RoaXMubmFtZV0udGFic2NvbnRlbnRFbGVtID0gdGhpcy5jb250ZW50RWxlbTtcclxuICAgICAgICAgICAgdGhpcy5nbG9iYWxzLmRhdGFbdGhpcy5uYW1lXS5zdXBlcnRhYnMgPSB0aGlzLnN1cGVydGFicztcclxuICAgICAgICAgICAgdGhpcy5nbG9iYWxzLmluaXRpYXRlKHRoaXMubmFtZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN1cGVydGFicy50YWJDaGFuZ2Uuc3Vic2NyaWJlKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSBlLmRldGFpbC5pbmRleDtcclxuICAgICAgICAgICAgICAgIGxldCB0YWJzID0gdGhpcy5jb250ZW50RWxlbS5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N1cGVyLXRhYicpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRhYiBvZiB0YWJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnQgPSB0YWIucXVlcnlTZWxlY3RvcignaW9uLWNvbnRlbnQnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udCAhPSBudWxsICYmIHR5cGVvZiBjb250LmF0dHJpYnV0ZXNbJ2hpZGVuYXYtc2gtY29udGVudCddICE9ICd1bmRlZmluZWQnICYmIGNvbnQuYXR0cmlidXRlc1snaGlkZW5hdi1zaC1jb250ZW50J10ubm9kZVZhbHVlICE9ICcnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goY29udC5hdHRyaWJ1dGVzWydoaWRlbmF2LXNoLWNvbnRlbnQnXS5ub2RlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdHNbaV0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5yZXNldENvbnRlbnQocmVzdWx0c1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmdsb2JhbHMuZGF0YVt0aGlzLm5hbWVdLnRhYnNjb250ZW50O1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=