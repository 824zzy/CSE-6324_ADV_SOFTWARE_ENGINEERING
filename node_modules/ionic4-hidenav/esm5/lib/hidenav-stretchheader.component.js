/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, ElementRef, Input, EventEmitter, Output, ContentChildren, HostBinding } from '@angular/core';
import { HidenavShService } from './hidenav-sh-service.service';
var HidenavStretchheaderComponent = /** @class */ (function () {
    function HidenavStretchheaderComponent(el, globals) {
        this.el = el;
        this.globals = globals;
        this.scroll = new EventEmitter();
    }
    /**
     * @return {?}
     */
    HidenavStretchheaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    HidenavStretchheaderComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var observer = new MutationObserver((/**
         * @param {?} mutations
         * @return {?}
         */
        function (mutations) {
            mutations.forEach((/**
             * @return {?}
             */
            function () {
                if (_this.el.nativeElement.getAttribute('hidenav-sh-header').length > 0) {
                    _this.name = _this.el.nativeElement.getAttribute('hidenav-sh-header');
                    _this.start();
                    observer.disconnect();
                }
            }));
        }));
        observer.observe(this.el.nativeElement, {
            attributes: true,
        });
    };
    /**
     * @return {?}
     */
    HidenavStretchheaderComponent.prototype.start = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.name) {
            if (typeof this.globals.data[this.name] == 'undefined' || this.globals.data[this.name] == null)
                this.globals.data[this.name] = [];
            this.globals.data[this.name].header = this.header;
            this.globals.data[this.name].static = this.static;
            this.globals.initiate(this.name);
            this.globals.scroll.subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                if (res.name == _this.name) {
                    _this.scroll.emit(res.height);
                }
            }));
            if (this.noBorder != 'true') {
                /** @type {?} */
                var mode_1 = document.querySelector('html').getAttribute('mode');
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if (typeof _this.class == 'undefined') {
                        _this.class = mode_1;
                    }
                    else {
                        _this.class += ' ' + mode_1;
                    }
                }), 0);
            }
        }
    };
    /**
     * @param {?=} duration
     * @return {?}
     */
    HidenavStretchheaderComponent.prototype.expand = /**
     * @param {?=} duration
     * @return {?}
     */
    function (duration) {
        if (duration === void 0) { duration = 200; }
        this.globals.expand(this.name, duration);
    };
    /**
     * @param {?=} duration
     * @return {?}
     */
    HidenavStretchheaderComponent.prototype.shrink = /**
     * @param {?=} duration
     * @return {?}
     */
    function (duration) {
        if (duration === void 0) { duration = 200; }
        this.globals.shrink(this.name, duration);
    };
    /**
     * @param {?=} duration
     * @return {?}
     */
    HidenavStretchheaderComponent.prototype.toggle = /**
     * @param {?=} duration
     * @return {?}
     */
    function (duration) {
        if (duration === void 0) { duration = 200; }
        this.globals.toggle(this.name, duration);
    };
    /**
     * @return {?}
     */
    HidenavStretchheaderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.name) {
            delete this.globals.data[this.name].header;
        }
    };
    HidenavStretchheaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hidenav-stretchheader',
                    template: "\n        <style>\n            .overlay {\n                position: absolute;\n                height: inherit;\n                width: inherit;\n                z-index: 101;\n                pointer-events: none;\n                /*opacity: var(--opacity);*/\n                background: var(--color);\n                filter: opacity(0);\n                --opacity: 0;\n                --color: black;\n            }\n\n            :host {\n                --blur: 0;\n                z-index: 1;\n            }\n\n            :host.md {\n                -webkit-box-shadow: 0px 2px 5px 0px rgba(0, 0, 0, 0.53);\n                -moz-box-shadow: 0px 2px 5px 0px rgba(0, 0, 0, 0.53);\n                box-shadow: 0px 2px 5px 0px rgba(0, 0, 0, 0.53);\n            }\n\n            :host.ios {\n                border-bottom: 1px solid #5a5e63;\n            }\n        </style>\n        <div class=\"overlay\"></div>\n        <ng-content></ng-content>\n    "
                }] }
    ];
    HidenavStretchheaderComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: HidenavShService }
    ]; };
    HidenavStretchheaderComponent.propDecorators = {
        header: [{ type: ContentChild, args: ['shrinkexpand', { read: ElementRef },] }],
        static: [{ type: ContentChildren, args: ['static', { read: ElementRef },] }],
        class: [{ type: HostBinding, args: ['class',] }],
        noBorder: [{ type: Input, args: ['no-border',] }],
        headerHeight: [{ type: Input, args: ['header-height',] }],
        initExpanded: [{ type: Input, args: ['init-expanded',] }],
        opacityColor: [{ type: Input, args: ['opacity-color',] }],
        opacityFactor: [{ type: Input, args: ['opacity-factor',] }],
        blurFactor: [{ type: Input, args: ['blur-factor',] }],
        preserveHeader: [{ type: Input, args: ['preserve-header',] }],
        scroll: [{ type: Output }]
    };
    return HidenavStretchheaderComponent;
}());
export { HidenavStretchheaderComponent };
if (false) {
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.header;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.static;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.class;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.name;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.noBorder;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.headerHeight;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.initExpanded;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.opacityColor;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.opacityFactor;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.blurFactor;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.preserveHeader;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.scroll;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.el;
    /** @type {?} */
    HidenavStretchheaderComponent.prototype.globals;
}
//# sourceMappingURL=data:application/json;base64,